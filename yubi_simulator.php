<?PHP	/*		Yubikey simulator v0.3 by Alex Skov Jensen		Simulate a yubikey if you know your AES-key and the publicID of the yubikey.				Released under lgpl (see www.gnu.org/licenses/lgpl.html for more information) 	*/	$publicID=$_POST["publicID"];	$secret_aes_key=$_POST["secret_aes_key"];	$secretID=$_POST["secretID"];	$counter=$_POST["counter"]+0;	$counter_session=$_POST["counter_session"]+0;	$timer=$_POST["timer"]+0;	$timer_starttime=$_POST["timer_starttime"]+0;	$random=$_POST["random"]+0;	$button=$_POST["button"];		if (stristr($button,"Simulate Insert"))	{		$counter+=1;		$counter_session=0;		$timer=0;		$timer_starttime=time();		$random=rand(0,65535);	}		if (stristr($button,"Simulate button press")) 	{		$counter_session+=1;		$random=rand(0,65535);		$timer=8*(time()-$timer_starttime);	}	//Handle wrap-around on counters and timers	if ($counter>65535) $counter=0;	if ($counter_session>255) $counter_session=0;	if ($timer>16777215) $timer=0;	if ($random>65535) $random=rand(0,65535);		// Pack the yubikey data	$crbin=pack('H*',$secretID);	$crbin.=chr($counter%256);	$crbin.=chr($counter/256);	$crbin.=chr($timer%65536);	$crbin.=chr($timer/256);	$crbin.=chr($timer/65536);	$crbin.=chr($counter_session);	$crbin.=chr($random%256);	$crbin.=chr($random/256);	$crc=crc($crbin);	$crbin.=chr($crc%256);	$crbin.=chr($crc/256);	require_once('AES128.php');	$aes=new AES128();	$key=$aes->makeKey(pack('H*',$secret_aes_key));	// Encrypt the data and modhex encode it	$coded=$aes->blockEncrypt($crbin,$key);	$token=$publicID.modhex_encode($coded);	function modhex_encode($mstring)	{		$cset="cbdefghijklnrtuv";		$encoded="";		for ($i=0; $i<strlen($mstring);$i++)		{			$hb=ord($mstring[$i])/16;			$lb=ord($mstring[$i])%16;			$encoded=$encoded.$cset[$hb].$cset[$lb];		}		return $encoded;	}		function crc($buffer)	{		$m_crc=0x5af0;		for($bpos=0; $bpos<14; $bpos++)		{			$m_crc ^= ord($buffer[$bpos]);			for ($i=0; $i<8; $i++)			{				$j=$m_crc & 1;				$m_crc >>= 1;				if ($j) $m_crc ^= 0x8408;			}		}		return $m_crc;	}?><html>	<head></head>	<body>		<h2>Yubikey simulator by Alex Skov Jensen</h2>		<form method="post" action="">			<table>				<tr><td>Public ID (String, normally 12 bytes ascii):</td><td><input type="text" name="publicID" value="<?php echo $publicID;?>" size="40"></td></tr>				<tr><td>Secret AES encryption key (HEX, 128 bit = 32 characters from 0-F):</td><td><input type="text" name="secret_aes_key" value="<?php echo $secret_aes_key;?>" size="40"></td></tr>				<tr><td>Secret ID (HEX, 48 bit = 12 characters from 0-F):</td><td><input type="text" name="secretID" value="<?php echo $secretID;?>" size="12"></td></tr>				<tr><td>Counter (Integer, 0-65535):</td><td><input type="text" name="counter" value="<?php echo $counter;?>" size="10"></td></tr>				<tr><td>Counter Session (Integer, 0-255):</td><td><input type="text" name="counter_session" value="<?php echo $counter_session;?>" size="10"></td></tr>				<tr><td>Timer (Integer, 0-16777215):</td><td><input type="text" name="timer" value="<?php echo $timer;?>" size="10"></td></tr>				<tr><td>Random number (Integer, 0-65535):</td><td><input type="text" name="random" value="<?php echo $random;?>" size="10"></td></tr>				<tr><td>CRC calculated:</td><td><?php echo $crc;?></td></tr>			</table><br>			<input type="submit" name="button" value="Generate OTP">			<input type="submit" name="button" value="Simulate Insert">			<input type="submit" name="button" value="Simulate button press">				<input type="hidden" name="timer_starttime" value="<?php echo $timer_starttime;?>">			</form>			<h3>OTP calculated: <?php echo $token;?></h3>	</body></html>